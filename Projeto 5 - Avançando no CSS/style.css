*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  /*
  :root is a general scope
  so its possible to dleclare some variables that will beused in the css, that way the variables faacilitates the use of css
  -- is how you iniciate the variable
  
  */
  --ff-heading: 'Epilogue', sans-serif;
  --ff-texting: 'Open sans', sans-serif;

  --hue: 250;
  --bg-primary: hsl(var(--hue), 22%, 20%);
  --fc-primary: hsl(var(--hue), 0%, 100%);
  --fc-secondary: hsl(var(--hue), 50%, 80%);
  --fc-secondary-dark: hsl(var(--hue), 100%, 11%, 1);


  font-size: 62.5%;
  --fs-body: clamp() 1.6rem;
  --fs-heading: clamp(4rem, 1rem + 5vw, 5.6rem); 
  /*
  clamp (minimum valuer, ideal value, maximum value)
  receive 3 arguments

  it is possible to ajust the font-size: clamp(  , iideal,   ) = 1rem + 5vw(viewport-width)
  */

}

body {
  font-family: var(--ff-texting);

  background-color: var(--bg-primary);
  color: var(--fc-primary);

  font-size: var(--fs-body);
}

.page {
  max-width: clamp(33rem, 30rem + 60vw, 117rem);
  padding: 0 5rem;
  margin: 0 auto;
}

img {
  width: 100%;
  height: auto;
}





header {
  margin: 10rem 0 8rem;

  font-family: var(--ff-heading);
  text-align: center;
  animation-name: topdown;
  animation-duration: 700ms;
}

header p {
  text-transform: uppercase;
  color: var(--fc-secondary);
  font-weight: 400;
  
  line-height: 3.2rem;
  
  letter-spacing: 3px;
  margin-bottom: 1.7rem;

}

header h1{
  font-size: var(--fs-heading);
  line-height: 4.8rem;
  font-weight: 800;
  
 
}

main {
  display: grid;
  gap: 3.2rem;
  animation: downtop 700ms 35ms backwards;
  /*
  animation: name duration timing-function delay iteration-count direction fill-mode;
  
  everytime you use the animation delay is necessary to use animation-fill-mode: forward or backwards
  */
}

.card {
  position: relative;
  font-family: var(--ff-heading);
}

.card img {
  height: 41.6rem;
  object-fit: cover;
  border-radius: 6px;
  
  transition: all 200ms;
  /* 
  the trasition will determ how, and with what time the tranfor and opacity will happen, that way , as i have two thing to change (transform and opacity), itis possible to use all and after you put the time you wnat to happen

  */
  filter: brightness(0.5);
}

.card img:hover {
  transform: scale(1.1);
  opacity: 0.4;
  /*
  when youss pass the mouse over the images it will  transform the scale, and changethe opacity,that way it is necessary to use the transition in the image
  */
}

.card h2 {
  position: absolute;
  bottom: 5.2rem;
  left: 2.8rem;
  
  font-weight: 800;
  font-size: 4rem;
  

  display: flex;
  flex-direction: column;
  gap: 2.8rem;
}

.card h2 span {
  border-radius: 2rem;
  
  background-color: var(--fc-primary);
  

  font-weight: 400;
  font-size: var(--fs-body);
  padding: 0 1.6rem ;
  

  width: fit-content;
  height: 3.8rem;


  color: var(--fc-secondary-dark);
  display: inline-flex;
  align-items: center;

}


/*
@ is a "at-rule"
*/
@keyframes topdown {
  0%{
    opacity:0;
    transform: translateY(-15%);
  }
  100%{
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes downtop {
  0% {
    opacity: 0;
    transform: translateY(15px);
}

  100% {
  opacity: 0;
  transform: translateY(0);
}
}
@media (min-width: 700px) {
  :root {
      --fs-heading: 5.6rem;
  }
 

  main {
    grid-template-columns: 1fr 1fr;
  }
}

@media (min-width:930px) {

  main {
    grid-template-areas: "A B B" 
    "C C D";
  }

  main div:nth-child(1) {
    grid-area: A;
  }

  main div:nth-child(2) {
    grid-area: B;
  }


  main div:nth-child(3) {
    grid-area: C;
  }

  main div:nth-child(4) {
    grid-area: D;
  }
}